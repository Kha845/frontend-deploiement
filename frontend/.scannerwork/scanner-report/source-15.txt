import { Box, Button, InputAdornment, TextField, Typography } from '@mui/material';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import * as yup from 'yup';
import { Controller, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { useStore } from '../../store/rootStore';
import { Navigate } from 'react-router-dom';
import EmailIcon from '@mui/icons-material/Email';
import LockIcon from '@mui/icons-material/Lock';
import { observer } from 'mobx-react-lite';
import { useState } from 'react';

// Schéma de validation des données avec Yup
const schema = yup.object().shape({
    email: yup.string().required('L\'email est requis').email('L\'email n\'est pas valide'),
    password: yup.string().required('Le mot de passe est requis'),
});

const Login = () => {
    const { rootStore: { authStore} } = useStore();
    const [errorMessage, setErrorMessage] = useState(''); 
    
    const { handleSubmit, control, formState: { errors, isSubmitting }, reset, } = useForm({ resolver: yupResolver(schema), defaultValues: { email: "", password: ""}});

    const isAuthenticated = authStore.isAuthenticated;
    // Soumission du formulaire
    const onSubmit = async (data: any) => {
        console.log("Form data:", data);
        try {
            const resData = await authStore.login({
                email: data.email,
                password: data.password,
            });
            console.log('Connexion réussie:', resData);
            reset();
            setErrorMessage('');
        } catch (error:any) {
            console.log("Erreur de connexion:", error);
            setErrorMessage('Verifiez vous identifiants');
            
        }
    };

    if (isAuthenticated) {
        // Redirection si l'utilisateur est authentifié
        return <Navigate to="/accueil" replace />;
    }

    return (
        <Box className="min-h-screen w-full flex flex-col items-center justify-center" 
         >
            <Card className="p-4 border rounded-lg shadow" sx={{marginLeft: '120%'}}>
                <CardContent>
                <Box className="text-center mb-4 text-white bg-gradient-to-r from-green-800 to-yellow-300 w-[690px]">
                <Typography variant="h4">LAGANE</Typography>
                </Box>
                    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                        <h1 className="text-lg font-bold mb-2 text-green-800 text-center">Connexion</h1>
                        {errorMessage && (
                            <Typography color="error" variant="body2" className="text-red-600" textAlign='center'>
                                {errorMessage}
                            </Typography>
                        )}
                        {/* Champ Email */}
                        <Controller
                            name="email"
                            control={control}
                            render={({ field }) => (
                                <TextField
                                    fullWidth
                                    id="email"
                                    label="Email"
                                    type="email"
                                    variant="filled"
                                    error={!!errors.email}
                                    helperText={errors.email ? errors.email.message : ''}
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <EmailIcon className='text-green-800' />
                                            </InputAdornment>
                                        ),
                                    }}
                                    {...field}
                                />
                            )}
                        />
                        {/* Champ Mot de passe */}
                        <Controller
                            name="password"
                            control={control}
                            render={({ field }) => (
                                <TextField
                                    fullWidth
                                    id="password"
                                    label="Mot de passe"
                                    type="password"
                                    variant="filled"
                                    error={!!errors.password}
                                    helperText={errors.password ? errors.password.message : ''}
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <LockIcon className='text-green-800' />
                                            </InputAdornment>
                                        ),
                                    }}
                                    {...field}
                                />
                            )}
                        />

                        {/* Bouton de connexion */}
                        <Box sx={{display: 'center', justifyContent:'center'}}>
                        <Button
                            variant='contained'
                            color='success'
                            className="px-4 py-2 text-white rounded"
                            type="submit"
                            disabled={isSubmitting} 
                        >
                            {isSubmitting ? "Vérification..." : "Connecter"}
                        </Button>
                        </Box>
                    </form>
                </CardContent>
            </Card>
        </Box>
    );
}

// eslint-disable-next-line react-refresh/only-export-components
export default observer(Login);
